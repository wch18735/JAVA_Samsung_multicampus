




<프로그램 구성>

class A{
  int su2=20;
  
  void hello(){}
}

class 클래스명
{//클래스시작

   //변수선언
      자료형 변수명;
    int su1=10;//속성변수
    A    a;//참조(reference)변수
   
   
   //메소드정의
    리턴형 메소드명(매개변수 선언)
   {
     System.out.println(su1);//10출력
     a = new A();
     System.out.println(a.su2);//20출력
     a.hello();
   } 


}//클래스끝


=======================================
<배열>Array
- 동일한 자료형을 갖는
   하나의 변수명으로 정의한
   자료들의 집합!!
- 시작번지는 0번지(음수번지를 사용X)
- 범위를 벗어나는 참조를 하면 안됨.
- 전체 데이터 갯수를 표현하는 속성
   ---> 배열명.length  :  배열의 크기, 요소 갯수
      
int su1=10; (O)
int su2=10,20,30;  (X)   
int []su3=            {10,   20,    30};  (O)   
번지 통해 각데이터를 구분     su3[0]  su3[1] su3[2]

System.out.println(su1); //10출력
System.out.println(su3[1]); //20출력
System.out.println(su3[3]); 
--->에러: ArrayIndexOutOfBoundsException

System.out.println(su3.length);// 3출력

===========================================================
<반복문> Loop
1.for문
 - 일정횟수 반복할 때 사용.
 - 규칙적인 수를 표현할 때 사용.
 - 배열(ArrayList)의 인덱스를 표현할 때 사용.
     배열(Array), ArrayList와 친하다
 
 형식)
 
 for(초기화1; 조건식2; 증감연산자3)
 {
   //반복적으로 실행할 문장4;
 }//for문의 끝괄호는 증감연산자로 분기!!
 
 실행순서)
          1 - 2(true) - 4 - 3
            - 2(true) - 4 - 3
            - 2(true) - 4 - 3
            - 2(true) - 4 - 3
            - 2(false) : for문 탈출!!

 적용예)
 
  for(int i=1; i<=3; i++ ){ //i=1,2,3
   System.out.println("안녕~!!");
  }

※print()메소드와 println()메소드 차이

  System.out.print(데이터);  
   기능-> 1. 데이터출력
   
  System.out.print();  ---> 에러발생: 출력할 데이터가 없기 때문 
   
  
  System.out.println(데이터);
   기능-> 1. 데이터출력
       2. 줄바꿈 (ln: line new)
  
  System.out.println(); ---> 데이터 출력없이 라인만 변경기능.
  
  System.out.print("대한");       
  System.out.print("민국");  
  ==> 대한민국     

  System.out.println("대한");       
  System.out.println();       
  System.out.println("민국");  
  ==> 대한
  
           민국


2.while문
  
  형식)
    while(조건식){
    
      //조건식 결과가 참인 동안 반복실행할 문장.
      
      
    }//while문의 끝괄호는 조건식으로 분기

  조건식: boolean데이터
 if문의 실행횟수: 0,1
 while문의 실행횟수: 0~무한대
 do~while문의 실행횟수: 1~무한대

3.do~while문
 형식)
    
  do{ 
      //조건식 결과가 참인 동안 반복실행할 문장.
    }while(조건식);
    
    
※제어문
	    1.break;
	      -switch문 또는 반복문에서만 사용
	      -switch블럭 또는 반복문 블럭을 벗어나는 역할.
	      
	    2.continue;
	      -반복문(for,while,do~while)에서만 사용
	      -반복블럭을 계속 진행시키는 역할.
	        for문 경우: 증감연산자로 분기
	        while,do~while문 경우: 조건식으로 분기             
    
    
    
    








