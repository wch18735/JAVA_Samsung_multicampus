



class A{
  void hello(){}
}

--------------------------------------------

int su; //속성변수 (값을 갖는 변수)
A a;    //참조변수 (주소를 갖는 변수)

  su=100;
  
  System.out.println(100);
  System.out.println(su);

  a = new A();

  System.out.println(new A());
  System.out.println(a);
  
  a.hello();
  new A().hello();  //프로그램내에서 단한번 hello()메소드를 호출!!


※ 속성변수와 참조변수 차이
  su.~ (X)
  a.멤버 (O)
  
int su=4;
int []arry={1,2,3,su};

---> 4데이터를 나타내는 변수?  su  ,  arry[3]
System.out.println(su);      //4출력
System.out.println(arry[3]); //4출력


A a = new A();
A []arry2 = {new A(), new A(), a };

---> new A()데이터를 나타내는 변수? a  , arry2[2]


a.hello();
arry2[2].hello();


String name="홍길동";

String []names={name};
  names.length ----> 배열의 크기(요소 갯수) : 1
  
문자열의 길이를 구하시오?
    name.length(); ----> 3
    names[0].length(); ----> 3
    
========================================================
class Test{
  A a;//변수선언  A a=null;

  void print(){
    a.hello();  //  null.hello();
  }

}

---> 위의 print()메소드 호출시 에러발생!! : NullPointerException


class Test{
  A a;//변수선언  A a=null;

  void print(){
    a = new A();
    a.hello();  //  메모리주소.hello();  정상적인 실행!!
  }

}

=====================================================
String []names = new String[5];
--> String []names = { null, null, null, null, null};



String []names = { null, null, "길라임", null, null};


수정작업)

  for(int i=0; i<names.length; i++){
      if(names[0].equals("길라임")){//null.equals("길라임") : 에러발생!!
         names[0] = "차라임";
      }
  }
  
문제해결1)  
  for(int i=0; i<names.length; i++){
    if(names[i] != null){//각 번지가 null이 아닐때 
      if(names[0].equals("길라임")){
         names[0] = "차라임";
      }
     } 
  }
  
문제해결2)  
  for(int i=0; i<names.length; i++){
     
      if("길라임".equals(names[i])){
         names[i] = "차라임";
      }
     
  }

    null.equals("길라임")  ---> NullPointerException
    "길라임".equals(null)  ---> 에러 안남!!


============================================================
<Exception> 예외처리
- 프로그램 실행 중에 발생하는 예기치 않은 사건.
  (자바는 프로그램 실행 중 발생할 수 있는 예외를 처리할 수 있는 기법제공.
   발생하는 모든 예외를 객체로 취급, 예외관련 클래스를 제공)

예)  정수를 0으로 나누는 경우
     배열의 첨자가 음수값을 가지는 경우
     배열 첨자가 배열의 크기를 벗어나는 경우
     부적절한 형변환이 일어나는 경우
         (int)"홍길동"
         (B)A   ---> A클래스와 B클래스는 상속관계가 없다
         (Parent)Child   (Child)Parent
         
     입출력시 인터럽트가 발생하는 경우
     입출력위해 지정한 파일이 없거나 파일 이름이 틀린경우.....
     
예외상황처리 ---> 자바언어를 더욱 강하게(robust) 만드는 요인!!

    기본예외상황처리기
    
            프로그램
         |        
         | 실행           JVM : 예외발생시 관련된 예외클래스로 부터 예외 객체생성,        
         |                       프로그램에서 지정된 예외처리루틴에게 넘겨준다.
            예외발생
     
<Exception 클래스 계층구조>
                java.lang.Throwable
                           |
               ------------------------
              |                        |
            Error                  Exception
          
 Error : 하드디스크 포맷이 망가진경우,  메모리파괴, 스택오버플로우
         (프로그램처리하지 않고 JVM에게 맡겨주는게 일반적임)  

<예외처리 구문 형식> (try~catch문)
   
try{
      예외가 발생할 가능성이 있는 문장;
   }catch(예외타입 변수명){
            예외가 발생시 실행(처리)할 문장;
     }
     
예외처리 case1) 각각 처리

  try{  
    AException이 발생할 가능성이 있는 문장;   
    }catch(AException ae){
       AException발생시 처리할 문장;
    }
    
  try{
    BException이 발생할 가능성이 있는 문장;  
    }catch(BException be){
       BException발생시 처리할 문장;
    } 
     
  try{ 
    CException이 발생할 가능성이 있는 문장;   
     }catch(CException ce){
       CException발생시 처리할 문장;
     }

예외처리 case2) 다중catch를 사용

  try{
  
    AException이 발생할 가능성이 있는 문장;
    BException이 발생할 가능성이 있는 문장;
    CException이 발생할 가능성이 있는 문장;
    
   }catch(AException e){
       AException발생시 처리할 문장;
   }catch(BException e){
       BException발생시 처리할 문장;
   }catch(CException e){
       CException발생시 처리할 문장;
   }finally{
       예외발생과 상관없이 반드시 실행해야 할 문장;
    }

※다중catch사용시 주의할 점: 
    만약 Exception들이 상속관계를 갖는 다면 자식클래스부터 정의를 해야함!!
    
<상속관계에서의 예외>

class Parent
{
   void print()throws AException, BException{}
}

class Child extends Parent
{
   void print()   {//Overriding메소드(※접근지정자는 확장, 예외는 축소)
   
   }
   throws AException, BException
   throws AException
   throws BException
   
   throws CException  (X)
   throws AException, BException, CException (X)
   
}

    

<사용자정의 예외>
- 예외의 발생은 JVM에 의해 실행중 발생할 수도 있지만
  사용자 프로그램에서 인위적으로 예외를 발생시킬 수 있다
  (throw문을 제공)
  
형식)
    throw 예외객체;
    throw new 예외객체타입(매개변수); 

=================================================================
  <java.util.Vector>
  - 가변길이 배열★
  - 객체에 대한 참조(주소)를 가지는 배열
  생성자)
     Vector(): 묵시적으로 10개의 방을 가진 Vector객체생성.
     Vector(int size): size지정된 크기의 Vector객체생성.
     Vector(int size, int incr): size크기의 Vector객체생성.
                 5       3
              새로운 요소가 추가되어 크기가 늘어나야 하는경우 incr지정만큼 늘어남.
  관련메소드)
     boolean hasMoreElements()  : 요소가 있으면 true, 없으면 false 리턴
     Object  nextElement()      : 다음 요소를 반환.



    
    







