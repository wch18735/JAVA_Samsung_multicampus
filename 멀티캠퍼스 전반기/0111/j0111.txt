


<개선된 for루프>
- for문을 통해 index(규칙적인 수)를 사용하지 않고
  각 방의 데이터만 사용(출력)할때 쓰임.
  
형식)
   for(자료형 변수명: 배열 또는 리스트명){
           반복될 문장
   }
  
==========================================================
<정규표현식(RegularExpression)에서 발생횟수를 표현하는 부호>

*      : 0~무한대
+      : 1~무한대
?      : 0,1
부호없음  : 1

==========================================================
<Java Collection Framework (JCF)> 
 - 데이터(참조데이터)를 담는 바구니
 - JCF는 구조를 정의하기 위해 인터페이스를 사용합니다. 
  (Collection, List, Set, Map)
 - 집합값을 다루는 다른 한 방법입니다. 
 - 배열보다 더 편리하게 다룰 수 있습니다. 


<JCF내의 클래스> -java.util.* 
Collection : 순서 없는 단순한 요소들의 집합입니다. 
List ★: 순차적 나열 순서지정이 가능한 요소들의 집합입니다. 
Set : 중복을 허용하지 않는 요소들의 집합입니다. 
SortedSet : 값들이 정렬된 Set 입니다. 
Map ★: 키와 키에 대응하는 값으로 이루어진 구조입니다. 
SortedMap : 키가 정렬된 Map 입니다. 


=========================================================
<내부클래스> Inner클래스
- 클래스 안에 클래스를 구성하는 것.

class A{   //외부클래스,Outer클래스,Top-level클래스
     자원1;
   int su;
     
   void hello(){
       print();//에러 발생!!
       B b = new B();
       b.print();
       
   }  


   class B{   -----> 뻐꾸기 클래스 //내부클래스,Inner클래스
        자원2;
       void print(){} 
       void goodBye(){
           hello();//외부클래스 자원 사용 가능!!
       }
   }

}

----> 저장: A.java   ---컴파일--->  A.class
                                 A$B.class

※참조
void hello(){

   void goodBye(){   ----> 에러발생: 메소드내에 다른 메소드 구현하는 것은 불가능!!
   
   }//goodBye

}//hello


=========================================================
<익명의 내부클래스>

class A{

   void hello(){
      System.out.println("안녕~!!");
   }
   
}

-----------------------------------
class My{

    void msg(A a){
       a.hello();
    }

}

class Test{
   public static void main(String []args){
      A a = new A(){
         //오버라이딩 메소드 정의
         void hello(){
           System.out.println("신짜오~!!");
         }
      };
      
      a.hello();
      
      My m = new My();
        m.msg(
            --------------------------------------------
               new A(){         
                 void hello(){
                   System.out.println("봉쥬르~!!");
                  }
               }  ===> 익명의 내부클래스
            --------------------------------------------
                
             );
   }//main
}
※점선영역의 정의
    class Child extends A{
       void hello(){
          System.out.println("봉쥬르~!!");
       }
    
    }
  ===> 만약 A가 인터페이스 였다면  
    class Child implements A{
       void hello(){
          System.out.println("봉쥬르~!!");
       }
    
    }
    



























































