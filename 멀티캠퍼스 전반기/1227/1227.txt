<데이터 공유>
ftp://192.168.0.82
  아이디: gildong
  비번: 1234

- JDK(Java Development Kit)설치
 ---> https://www.oracle.com
 ---> Menu ---> Developer
 ---> jdk-8u191-windows-x64.exe


<환경변수 설정> 
- 설치된  JDK를 현재 시스템이 인식하도록 하는 과정
  ---> 제어판
  ---> 시스템 환경변수 편집
  ---> 고급탭
  ---> 환경변수 클릭

1. path설정(명령어들의 위치설정)
   ---> C:\Program Files\Java\jdk1.8.0_191\bin

변수이름: path
변수값: C:\Program Files\Java\jdk1.8.0_191\bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;%SystemRoot%\system32


2. classpath설정(추가되는 자바class들의 위치설정)
   ---> .;C:\Program Files\Java\jdk1.8.0_191\lib

==> 설치후 확인법
    cmd창(명령어창)
        javac -version
        java -version

변수이름: JAVA_HOME
변수값: C:\Program Files\Java\jdk1.8.0_191

----> bin폴더와 lib폴더의 공통된 경로
----> 여러 자바관련된 툴이 인식하는 경로
path경로: C:\Program Files\Java\jdk1.8.0_191\bin
               ===> %JAVA_HOME%\bin
classpath경로: .;C:\Program Files\Java\jdk1.8.0_191\lib
               ===> .;%JAVA_HOME%\lib



==================================================
<프로그램 작성과 실행>
1. 소스코드(HelloTest.java) 작성
   ---> 사람이 읽을 수 있는 파일을 SourceFile 이라고 함.

public class HelloTest
  {
     public static void main(String args[ ])
        {
              System.out.println("안녕, 자바~!!");
        }
  }

===> 저장파일명은 반드시 첫줄의 class 뒤에 있는 단어와 일치(대소문자까지)
===> HelloTest.java (O)
         Hellotest.java (X)
         helloTest.java (X)

   컴파일)
      HelloTest.java  -- Compile(javac.exe) ---> HelloTest.class
   명령어실행)   
      javac 컴파일하고자 하는 자바파일명(.java포함)
       --->javac HelloTest.java

2. 바이트코드(HelloTest.class) 실행 
    ---> Source File은 자바JVM(자바가상머신)이 읽을 수 없으므로
          반드시 컴파일 과정을 거쳐 Byte Code File로 변환 시켜야 함.
          
   인터프리터)
       HelloTest.class  -- Interpreter(java.exe) ---> JVM위에서 실행
   명령어실행)
       java 실행하고자 하는 자바클래스명(.class 확장자 포함하지 않음)
        ---> java HelloTest
-------------------------------------------------------------------------------
※이클립스 설치(프로그램 에디터)
- https://www.eclipse.org

<이클립스 단축키>
ctrl + space  : 자동완성기능
ctrl + 1      : 제안 기능
ctrl + alt + 아래위 화살표   : 복사기능
ctrl + /      : 주석(설명문)표시


==============================================
※ (자바)프로그램을 잘 하려면?
1. 프로그램의 구성요소
  - 필드(field,변수) : 데이터 속성, 자료구조, 데이터를 담는 그릇

  - 메소드(method, 함수) : 기능, 행위

  - 클래스(class): 자바프로그램 기본단위(파일), (필드,메소드를 담는)울타리


2. 구성요소 구분
  - 필드,변수 : 첫글자 소문자, 단어 뒤에 ( )소괄호 포함X
  - 메소드     : 첫글자 소문자, 단어 뒤에 ( )소괄호 포함O
  - 클래스     : 첫글자 대문자

System  .    out   .   println("안녕");
클래스                 필드                 메소드

3. 구성요소 형식
  - 변수
    형식)
         자료형 변수명;
             ----> 변수선언

          int v;            변수선언
               v=10;      변수초기화(값할당)

          String v2;
                   v2= "hello";

          String hello;
                    hello="안녕안녕!!"

          System.out.println(v);       10 출력
          System.out.println(v2);      hello 출력
          System.out.println(hello);   안녕안녕 출력
          System.out.println("hi");    hi 출력
          
  - 메소드 ★
     형식)
     
   리턴자료형  메소드명(매개변수)
    {//메소드 시작
    
    }//메소드 끝      
     
  void gildong(  )
    {
      1. 창문앞으로 이동;
      2. 창문열기;
      3. 되돌아오기;  -----> return; (생략가능)
    }
    
   void ==> 메소드를 실행한 후 반환되는 데이터가 없음을 표현하는 예약어
   
  Coffee lime(  )
   {
      1. 자판기앞으로 이동;
      2. 동전을 투입;
      3. 커피버튼 클릭;
      4. 커피를 가지고 되돌아오기; ----> return 커피; (생략불가능)
   }
     
  Cola juwon(int coin)
   { 
      1. 코인 가져오기
      2. 자판기앞으로 이동;
      3. 동전을 투입;
      4. 콜라버튼 클릭;
      5. 콜라를 가지고 되돌아오기; ----> return 콜라; (생략불가능)
   }  

  - 클래스
     형식)

      class 클래스명
       {

       }


        

 

























